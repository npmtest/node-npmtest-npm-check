{"/home/travis/build/npmtest/node-npmtest-npm-check/test.js":"/* istanbul instrument in package npmtest_npm_check */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-check/lib.npmtest_npm_check.js":"/* istanbul instrument in package npmtest_npm_check */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_check = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_check = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-check/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-check && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_check */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_check\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_check.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npm_check.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_check.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npm_check.__dirname + '/lib.npmtest_npm_check.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/index.js":"'use strict';\n\nconst npmCheck = require('./in');\nconst createState = require('./state/state');\n\nfunction init(userOptions) {\n    return createState(userOptions)\n        .then(currentState => npmCheck(currentState));\n}\n\nmodule.exports = init;\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/in/index.js":"'use strict';\nconst co = require('co');\nconst merge = require('merge-options');\nconst ora = require('ora');\nconst getUnusedPackages = require('./get-unused-packages');\nconst createPackageSummary = require('./create-package-summary');\n\nmodule.exports = function (currentState) {\n    return co(function *() {\n        yield getUnusedPackages(currentState);\n\n        const spinner = ora(`Checking npm registries for updated packages.`);\n        spinner.enabled = spinner.enabled && currentState.get('spinner');\n        spinner.start();\n\n        const cwdPackageJson = currentState.get('cwdPackageJson');\n\n        function dependencies(pkg) {\n            if (currentState.get('global')) {\n                return currentState.get('globalPackages');\n            }\n\n            if (currentState.get('ignoreDev')) {\n                return pkg.dependencies;\n            }\n\n            return merge(pkg.dependencies, pkg.devDependencies);\n        }\n\n        const allDependencies = dependencies(cwdPackageJson);\n        const allDependenciesIncludingMissing = Object.keys(merge(allDependencies, currentState.get('missingFromPackageJson')));\n\n        const arrayOfPackageInfo = yield allDependenciesIncludingMissing\n            .map(moduleName => createPackageSummary(moduleName, currentState))\n            .filter(Boolean);\n\n        currentState.set('packages', arrayOfPackageInfo);\n\n        spinner.stop();\n        return currentState;\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/in/get-unused-packages.js":"'use strict';\n\nconst depcheck = require('depcheck');\nconst ora = require('ora');\nconst _ = require('lodash');\n\nfunction skipUnused(currentState) {\n    return currentState.get('skipUnused') ||        // manual option to ignore this\n        currentState.get('global') ||               // global modules\n        currentState.get('update') ||               // in the process of doing an update\n        !currentState.get('cwdPackageJson').name;   // there's no package.json\n}\n\nfunction checkUnused(currentState) {\n    const spinner = ora(`Checking for unused packages. --skip-unused if you don't want this.`);\n    spinner.enabled = spinner.enabled && currentState.get('spinner');\n    spinner.start();\n\n    return new Promise(resolve => {\n        if (skipUnused(currentState)) {\n            resolve(currentState);\n        }\n\n        const depCheckOptions = {\n            ignoreDirs: [\n                'sandbox',\n                'dist',\n                'generated',\n                '.generated',\n                'build',\n                'fixtures'\n            ],\n            ignoreMatches: [\n                'gulp-*',\n                'grunt-*',\n                'karma-*',\n                'angular-*',\n                'babel-*',\n                'metalsmith-*',\n                'grunt',\n                'mocha',\n                'ava'\n            ]\n        };\n\n        depcheck(currentState.get('cwd'), depCheckOptions, resolve);\n    }).then(depCheckResults => {\n        spinner.stop();\n        const unusedDependencies = [].concat(depCheckResults.dependencies, depCheckResults.devDependencies);\n        currentState.set('unusedDependencies', unusedDependencies);\n\n        const cwdPackageJson = currentState.get('cwdPackageJson');\n\n        // currently missing will return devDependencies that aren't really missing\n        const missingFromPackageJson = _.omit(depCheckResults.missing || {},\n                    Object.keys(cwdPackageJson.dependencies), Object.keys(cwdPackageJson.devDependencies));\n        currentState.set('missingFromPackageJson', missingFromPackageJson);\n        return currentState;\n    });\n}\n\nmodule.exports = checkUnused;\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/in/create-package-summary.js":"'use strict';\n\nconst readPackageJson = require('./read-package-json');\nconst getLatestFromRegistry = require('./get-latest-from-registry');\nconst _ = require('lodash');\nconst semverDiff = require('semver-diff');\nconst pathExists = require('path-exists');\nconst path = require('path');\nconst semver = require('semver');\nconst minimatch = require('minimatch');\n\nfunction createPackageSummary(moduleName, currentState) {\n    const cwdPackageJson = currentState.get('cwdPackageJson');\n\n    const modulePath = path.join(currentState.get('nodeModulesPath'), moduleName);\n    const packageIsInstalled = pathExists.sync(modulePath);\n    const modulePackageJson = readPackageJson(path.join(modulePath, 'package.json'));\n\n    // Ignore private packages\n    const isPrivate = Boolean(modulePackageJson.private);\n    if (isPrivate) {\n        return false;\n    }\n\n    // Ignore packages that are using github or file urls\n    const packageJsonVersion = cwdPackageJson.dependencies[moduleName] ||\n        cwdPackageJson.devDependencies[moduleName] ||\n        currentState.get('globalPackages')[moduleName];\n\n    if (packageJsonVersion && !semver.validRange(packageJsonVersion)) {\n        return false;\n    }\n\n    // Ignore specified '--ignore' package globs\n    const ignore = currentState.get('ignore');\n    if (ignore) {\n        const ignoreMatch = Array.isArray(ignore) ? ignore.some(ignoredModule => minimatch(moduleName, ignoredModule)) : minimatch(moduleName, ignore);\n        if (ignoreMatch) {\n            return false;\n        }\n    }\n\n    const unusedDependencies = currentState.get('unusedDependencies');\n    const missingFromPackageJson = currentState.get('missingFromPackageJson');\n\n    function foundIn(files) {\n        if (!files) {\n            return;\n        }\n\n        return 'Found in: ' + files.map(filepath => filepath.replace(currentState.get('cwd'), ''))\n            .join(', ');\n    }\n\n    return getLatestFromRegistry(moduleName)\n        .then(fromRegistry => {\n            const installedVersion = modulePackageJson.version;\n\n            const latest = installedVersion && fromRegistry.latest && fromRegistry.next && semver.gt(installedVersion, fromRegistry.latest) ? fromRegistry.next : fromRegistry.latest;\n            const versions = fromRegistry.versions || [];\n\n            const versionWanted = semver.maxSatisfying(versions, packageJsonVersion);\n\n            const versionToUse = installedVersion || versionWanted;\n            const usingNonSemver = semver.valid(latest) && semver.lt(latest, '1.0.0-pre');\n\n            const bump = semver.valid(latest) &&\n                        semver.valid(versionToUse) &&\n                        (usingNonSemver && semverDiff(versionToUse, latest) ? 'nonSemver' : semverDiff(versionToUse, latest));\n\n            const unused = _.includes(unusedDependencies, moduleName);\n\n            return {\n                // info\n                moduleName: moduleName,\n                homepage: fromRegistry.homepage,\n                regError: fromRegistry.error,\n                pkgError: modulePackageJson.error,\n\n                // versions\n                latest: latest,\n                installed: versionToUse,\n                isInstalled: packageIsInstalled,\n                notInstalled: !packageIsInstalled,\n                packageWanted: versionWanted,\n                packageJson: packageJsonVersion,\n\n                // Missing from package json\n                notInPackageJson: foundIn(missingFromPackageJson[moduleName]),\n\n                // meta\n                devDependency: _.has(cwdPackageJson.devDependencies, moduleName),\n                usedInScripts: _.findKey(cwdPackageJson.scripts, script => {\n                    return script.indexOf(moduleName) !== -1;\n                }),\n                mismatch: semver.validRange(packageJsonVersion) &&\n                    semver.valid(versionToUse) &&\n                    !semver.satisfies(versionToUse, packageJsonVersion),\n                semverValid:\n                    semver.valid(versionToUse),\n                easyUpgrade: semver.validRange(packageJsonVersion) &&\n                    semver.valid(versionToUse) &&\n                    semver.satisfies(latest, packageJsonVersion) &&\n                    bump !== 'major',\n                bump: bump,\n\n                unused: unused\n            };\n        });\n}\n\nmodule.exports = createPackageSummary;\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/in/read-package-json.js":"'use strict';\n\nconst merge = require('merge-options');\n\nfunction readPackageJson(filename) {\n    let pkg;\n    let error;\n    try {\n        pkg = require(filename);\n    } catch (e) {\n        if (e.code === 'MODULE_NOT_FOUND') {\n            error = new Error(`A package.json was not found at ${filename}`);\n        } else {\n            error = new Error(`A package.json was found at ${filename}, but it is not valid.`);\n        }\n    }\n    return merge(pkg, {devDependencies: {}, dependencies: {}, error: error});\n}\n\nmodule.exports = readPackageJson;\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/in/get-latest-from-registry.js":"'use strict';\n\nconst _ = require('lodash');\nconst bestGuessHomepage = require('./best-guess-homepage');\nconst semver = require('semver');\nconst packageJson = require('package-json');\nconst cpuCount = require('os').cpus().length;\nconst throat = require('throat')(cpuCount);\n\nfunction getNpmInfo(packageName) {\n    return throat(() => packageJson(packageName))\n        .then(rawData => {\n            const CRAZY_HIGH_SEMVER = '8000.0.0';\n\n            const sortedVersions = _(rawData.versions)\n                .keys()\n                .remove(_.partial(semver.gt, CRAZY_HIGH_SEMVER))\n                .sort(semver.compare)\n                .valueOf();\n\n            const latest = rawData['dist-tags'].latest;\n            const next = rawData['dist-tags'].next;\n            const latestStableRelease = semver.satisfies(latest, '*') ?\n                latest :\n                semver.maxSatisfying(sortedVersions, '*');\n            return {\n                latest: latestStableRelease,\n                next: next,\n                versions: sortedVersions,\n                homepage: bestGuessHomepage(rawData)\n            };\n        }).catch(err => {\n            const errorMessage = `Registry error ${err.message}`;\n            return {\n                error: errorMessage\n            };\n        });\n}\n\nmodule.exports = getNpmInfo;\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/in/best-guess-homepage.js":"'use strict';\n\nconst gitUrl = require('giturl');\n\nfunction bestGuessHomepage(data) {\n    if (!data) {\n        return false;\n    }\n\n    const packageDataForLatest = data.versions[data['dist-tags'].latest];\n\n    return packageDataForLatest.homepage ||\n        packageDataForLatest.bugs && packageDataForLatest.bugs.url && gitUrl.parse(packageDataForLatest.bugs.url.trim()) ||\n        packageDataForLatest.repository && packageDataForLatest.repository.url && gitUrl.parse(packageDataForLatest.repository.url.trim());\n}\n\nmodule.exports = bestGuessHomepage;\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/state/state.js":"'use strict';\nconst mergeOptions = require('merge-options');\nconst init = require('./init');\nconst debug = require('./debug');\n\nconst defaultOptions = {\n    update: false,\n    global: false,\n    cwd: process.cwd(),\n    nodeModulesPath: false,\n    skipUnused: false,\n\n    ignoreDev: false,\n    forceColor: false,\n    saveExact: false,\n    debug: false,\n    emoji: true,\n    spinner: false,\n    installer: 'npm',\n    ignore: [],\n\n    globalPackages: {},\n    cwdPackageJson: {devDependencies: {}, dependencies: {}},\n\n    packages: false,\n    unusedDependencies: false,\n    missingFromPackageJson: {}\n};\n\nfunction state(userOptions) {\n    const currentStateObject = mergeOptions(defaultOptions, {});\n\n    function get(key) {\n        if (!currentStateObject.hasOwnProperty(key)) {\n            throw new Error(`Can't get unknown option \"${key}\".`);\n        }\n        return currentStateObject[key];\n    }\n\n    function set(key, value) {\n        if (get('debug')) {\n            debug('set key', key, 'to value', value);\n        }\n\n        if (currentStateObject.hasOwnProperty(key)) {\n            currentStateObject[key] = value;\n        } else {\n            throw new Error(`unknown option \"${key}\" setting to \"${JSON.stringify(value, false, 4)}\".`);\n        }\n    }\n\n    function inspectIfDebugMode() {\n        if (get('debug')) {\n            inspect();\n        }\n    }\n\n    function inspect() {\n        debug('current state', all());\n    }\n\n    function all() {\n        return currentStateObject;\n    }\n\n    const currentState = {\n        get: get,\n        set: set,\n        all,\n        inspectIfDebugMode\n    };\n\n    return init(currentState, userOptions);\n}\nmodule.exports = state;\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/state/init.js":"'use strict';\nconst _ = require('lodash');\nconst path = require('path');\nconst globalModulesPath = require('global-modules');\nconst readPackageJson = require('../in/read-package-json');\nconst globalPackages = require('../in/get-installed-packages');\nconst emoji = require('../out/emoji');\n\nfunction init(currentState, userOptions) {\n    return new Promise((resolve, reject) => {\n        _.each(userOptions, (value, key) => currentState.set(key, value));\n\n        if (currentState.get('global')) {\n            currentState.set('cwd', globalModulesPath);\n            currentState.set('nodeModulesPath', globalModulesPath);\n            currentState.set('globalPackages', globalPackages(globalModulesPath));\n        } else {\n            const cwd = path.resolve(currentState.get('cwd'));\n            const pkg = readPackageJson(path.join(cwd, 'package.json'));\n            currentState.set('cwdPackageJson', pkg);\n            currentState.set('cwd', cwd);\n            currentState.set('nodeModulesPath', path.join(cwd, 'node_modules'));\n        }\n\n        emoji.enabled(currentState.get('emoji'));\n\n        if (currentState.get('cwdPackageJson').error) {\n            return reject(currentState.get('cwdPackageJson').error);\n        }\n\n        return resolve(currentState);\n    });\n}\n\nmodule.exports = init;\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/in/get-installed-packages.js":"'use strict';\nconst _ = require('lodash');\nconst globby = require('globby');\nconst readPackageJson = require('./read-package-json');\nconst path = require('path');\n\nmodule.exports = function (cwd) {\n    const GLOBBY_PACKAGE_JSON = '{*/package.json,@*/*/package.json}';\n    const installedPackages = globby.sync(GLOBBY_PACKAGE_JSON, {cwd: cwd});\n\n    return _(installedPackages)\n        .map(pkgPath => {\n            const pkg = readPackageJson(path.resolve(cwd, pkgPath));\n            return [pkg.name, pkg.version];\n        })\n        .fromPairs()\n        .valueOf();\n};\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/out/emoji.js":"'use strict';\n\nconst emoji = require('node-emoji');\n\nlet emojiEnabled = true;\n\nfunction output(name) {\n    if (emojiEnabled) {\n        return emoji.emojify(name);\n    }\n\n    return '';\n}\n\nfunction enabled(val) {\n    emojiEnabled = val;\n}\n\nmodule.exports = output;\nmodule.exports.enabled = enabled;\n","/home/travis/build/npmtest/node-npmtest-npm-check/node_modules/npm-check/lib/state/debug.js":"'use strict';\nconst chalk = require('chalk');\n\nfunction debug() {\n    console.log(chalk.green('[npm-check] debug'));\n    console.log.apply(console, arguments);\n    console.log(`${chalk.green('===============================')}`);\n}\n\nmodule.exports = debug;\n"}